module.exports = {
  title: "AntSword Exploits Framework",
  success: "Successful execution",
  error: "Execution failed",
  no_mode: "Please click the button above to select a mode",
  form_not_comp: "Please complete",
  result_title: "Output result",
  toolbar: {
    start: "Start",
    select_mode: "Select Mode",
  },
  precheck: {
    only_linux: "Only supports Linux operating system",
    only_win: "Only supports Windows operating system",
    require_func: (func) => `${func} function is not available`,
    not_support: `The current type is not supported`,
  },
  core: {
    base_info: {
      title: "Basic Information",
    },
    reverse_shell: {
      title: "Reverse Shell",
      form: {
        reverse_type: "Reverse Type",
        bind_type: "Binding Type",
        targetIP: "Target IP",
        targetPORT: "Target Port",
        bindPORT: "Bind Port",
      },
      msg: {},
    },
    memshell_inject: {
      title: "Memory Shell Inject",
      form: {
        shell_type: "Memory Shell Type",
        ServiceName: "Component Name",
        UrlPath: "URL Path",
        ShellPass: "Password",
        SecretKey: "Secret Key",
        Content: "WebShell Content",
      },
      msg: {},
    },
    memshell_manage: {
      title: "Memory Shell Management",
      form: {
        listAllService: "Get Service",
        deleteServlet: "Delete Servlet",
        deleteFilter: "Delete Filter",
        ServiceName: "Component Name",
        VPPUrlPath: "VPP Url Path",
        VPPClassName: "Class Name",
        deleteVPP: "Delete VPP",
      },
    },
    av_list: {
      title: "AV Recognition",
      toolbar: {
        auto: "Auto Obtain",
        manual: "Manually Obtain",
      },
    },
    exploit_suggest: {
      title: "Privilege Elevation Assist",
    },
    screen_shot: {
      title: "Screen Shot",
    },
    shellcode_loader: {
      title: "ShellCode Loader",
      form:{
        randomProcess:"Inject random process",
        setTargetProcess:"Inject target process",
        targetProcess:"Target process",
      }
    },
    jar_loader: {
      title: "Jar Loader",
      form: {
        load_type: "Load type",
        load_by_memory: "Load by memory",
        local_file_path: "Local file path",
        select_file: "Select file",
        load_by_file: "Load by file",
        remote_file_path: "Remote file path",
      },
    },
    sharp_loader:{
      title:"SharpLoader",
      form:{
        load_type: "Load type",
        load_by_memory: "Load by memory",
        local_file_path: "Local file path",
        select_file: "Select file",
        load_by_url: "Load by URL",
        remote_file_path: "URL path",
        command_args: "Command args"
      }
    },
    bypass_openrasp: {
      title: "Bypass OpenRASP",
    },
    exec_payload: {
      title: "Execute Your Payload",
    },
    about: {
      title: "About",
    },
  },
};
