"use strict";
const Base = require("../base");
const LANG = require("../../language"); // 插件语言库
const LANG_T = antSword["language"]["toastr"]; // 通用通知提示
// 内存shell模块
class MemShellManage extends Base {
  precheck() {
    if (this.shelltype == "jsp") {
      return true;
    }
    return false;
  }
  createForm(cell) {
    var str = [
      {
        type: "radio",
        name: "ServiceAction",
        label: LANG["core"]["memshell_manage"]["form"]["listAllService"],
        checked: "1",
        value: "listAllService",
        position: "label-right",
      },
      {
        type: "radio",
        name: "ServiceAction",
        label: LANG["core"]["memshell_manage"]["form"]["deleteServlet"],
        value: "deleteServlet",
        position: "label-right",
        list: [
          {
            type: "input",
            name: "ServletName",
            label: LANG["core"]["memshell_manage"]["form"]["ServletName"],
          },
        ],
      },
      {
        type: "radio",
        name: "ServiceAction",
        label: LANG["core"]["memshell_manage"]["form"]["deleteFilter"],
        value: "deleteFilter",
        position: "label-right",
        list: [
          {
            type: "input",
            name: "FilterName",
            label: LANG["core"]["memshell_manage"]["form"]["FilterName"],
          },
        ],
      },
      { type: "settings", labelWidth: 150, inputWidth: 200 },
    ];
    var form = cell.attachForm(str);
    this.form = form;
  }
  getArgs() {
    let args = {};
    let ServiceAction = this.form.getCheckedValue("ServiceAction");
    args["targetAction"] = ServiceAction;
    this.payloadtype = "default";

    switch (ServiceAction) {
      case "listAllService":
        break;
      case "deleteServlet":
        args["targetServiceName"] = this.form.getItemValue("ServletName");
        break;
      case "deleteFilter":
        args["targetServiceName"] = this.form.getItemValue("FilterName");
        break;
      default:
        break;
    }
    console.log(args);

    return args;
  }
  exploit() {
    let self = this;
    self.core = this.top.core;
    let args = this.getArgs(); //获取参数
    let data = this.genPayload(args);
    let cellB = this.layout.cells("b");
    self.core
      .request(data)
      .then((_ret) => {
        let res = antSword.unxss(_ret["text"], false); //过滤xss
        if (res === "") {
          res = "output is empty.";
        }
        self.safeHTML(cellB, res);
        // this.editor.session.setValue(res); //回显内容到输出结果
        // this.editor.setReadOnly(true);
        toastr.success(LANG["success"], LANG_T["success"]);
      })
      .catch((e) => {
        console.log(JSON.stringify(e));
        toastr.error(e.constructor === Object ? JSON.stringify(e) : e, "Error");
      });
  }
}

module.exports = MemShellManage;
