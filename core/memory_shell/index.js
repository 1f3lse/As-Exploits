"use strict";
const Base = require("../base");
const LANG = require("../../language"); // 插件语言库
const crypto = require("crypto");
// 内存shell模块
class MemoryShell extends Base {
  precheck() {
    if (this.shelltype == "jsp") {
      return true;
    }
    return false;
  }
  createForm(cell) {
    var str = [
      { type: "settings", labelWidth: 150, inputWidth: 200 },
      {
        type: "radio",
        name: "service_type",
        label: "Servlet",
        checked: "1",
        value: "Servlet",
        position: "label-right",
        list: [
          {
            type: "select",
            name: "Servlet_type",
            label: LANG["core"]["memory_shell"]["form"]["shell_type"],
            inputWidth: 200,
            options: [
              { value: "AntSword", text: "AntSword" },
              { value: "Behinder", text: "Behinder" },
              { value: "GodzillaBase64", text: "Godzilla-Base64" },
              { value: "NeoreGeorg", text: "NeoreGeorg" },
            ],
          },
        ],
      },
      {
        type: "radio",
        name: "service_type",
        label: "Filter",
        checked: "0",
        value: "Filter",
        position: "label-right",
        list: [
          {
            type: "select",
            name: "Filter_type",
            label: LANG["core"]["memory_shell"]["form"]["shell_type"],
            inputWidth: 200,
            options: [
              { value: "AntSword", text: "AntSword" },
              { value: "Behinder", text: "Behinder" },
              // { value: "GodzillaBase64", text: "Godzilla-Base64" },
              { value: "NeoreGeorg", text: "NeoreGeorg" },
            ],
          },
        ],
      },
      { type: "newcolumn" },
      {
        type: "block",
        name: "form_block",
        offsetLeft: "25",
        offsetTop: "10",
        list: [
          {
            type: "input",
            name: "ServiceName",
            label: LANG["core"]["memory_shell"]["form"]["ServiceName"],
            required: true,
          },
          {
            type: "input",
            name: "UrlPath",
            label: LANG["core"]["memory_shell"]["form"]["UrlPath"],
            required: true,
          },
          {
            type: "input",
            name: "ShellPass",
            label: LANG["core"]["memory_shell"]["form"]["ShellPass"],
            required: true,
          },
          {
            type: "input",
            name: "SecretKey",
            label: LANG["core"]["memory_shell"]["form"]["SecretKey"],
          },
        ],
      },
    ];
    var form = cell.attachForm(str);
    this.form = form;
  }
  getArgs() {
    let args = {};
    let service_type = this.form.getCheckedValue("service_type"); //内存马种类
    let shell_type = this.form.getItemValue(service_type + "_type"); //打入什么内存马
    args["UrlPath"] = this.form.getItemValue("UrlPath");
    args["ServiceName"] = this.form.getItemValue("ServiceName");

    switch (shell_type) {
      case "AntSword":
        args["ShellPass"] = this.form.getItemValue("ShellPass");
        break;
      case "Behinder":
        let ShellPass = crypto
          .createHash("md5")
          .update(this.form.getItemValue("ShellPass"))
          .digest("hex")
          .substr(0, 16);
        args["ShellPass"] = ShellPass; // 冰蝎3.x的密码为明文md5后的前16位
        break;
      case "GodzillaBase64":
        args["ShellPass"] = this.form.getItemValue("ShellPass");
        let key = this.form.getItemValue("SecretKey");
        let SecretKey = crypto
          .createHash("md5")
          .update(key)
          .digest("hex")
          .substr(0, 16); // 哥斯拉的key是明文md5处理后前16位
        args["SecretKey"] = SecretKey;
        break;
      case "NeoreGeorg":
        args["ShellPass"] = this.form.getItemValue("ShellPass"); // 额外密码，如果没有收到额外密码则继续filterChain
        break;
      default:
        break;
    }
    this.payloadtype = shell_type + service_type;

    // console.log(args);

    return args;
  }
}

module.exports = MemoryShell;
