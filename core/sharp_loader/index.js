"use strict";

const Base = require("../base");
const LANG = require("../../language"); // 插件语言库
const LANG_T = antSword["language"]["toastr"]; // 通用通知提示
class SharpLoader extends Base {
  precheck() {
    if (this.shelltype == "aspxcsharp" || this.shelltype == "aspx") {
      return true;
    }
    return false;
  }
  createForm(cell) {
    let self = this;
    var str = [
      {
        type: "radio",
        name: "load_type",
        label: LANG["core"]["sharp_loader"]["form"]["load_by_memory"],
        value: "load_by_memory",
        position: "label-right",
        list: [
          {
            type: "input",
            name: "local_file_path",
            label: LANG["core"]["sharp_loader"]["form"]["local_file_path"],
            labelAlign: "left",
            inputWidth: 400,
            labelWidth: 80,
            position: "label-left",
          },
          {
            type: "button",
            name: "select_file",
            value: LANG["core"]["sharp_loader"]["form"]["select_file"],
          },
        ],
      },
      {
        type: "radio",
        name: "load_type",
        label: LANG["core"]["sharp_loader"]["form"]["load_by_url"],
        value: "load_by_url",
        position: "label-right",
        list: [
          {
            type: "input",
            name: "remote_file_path",
            label: LANG["core"]["sharp_loader"]["form"]["remote_file_path"],
            labelAlign: "left",
            inputWidth: 400,
            labelWidth: 80,
            position: "label-left",
          },
        ],
      },

      {
        type: "input",
        name: "command_args",
        label: LANG["core"]["sharp_loader"]["form"]["command_args"],
        inputWidth: 400,
        labelWidth: 80,
        offsetLeft: "20",
        offsetTop: "20",
      },
    ];
    var form = cell.attachForm(str);
    form.attachEvent("onButtonClick", function (name, command) {
      const { dialog } = require("electron").remote;
      dialog.showOpenDialog(
        {
          title: "选择文件",
          //默认路径,默认选择的文件
          // defaultPath: "calc.jar",
          //过滤文件后缀
          filters: [
            {
              name: "exe",
              extensions: ["exe"],
            },
            { name: "All Files", extensions: ["*"] },
          ],
        },
        (result) => {
          console.log(result);
          self.form.setItemValue("local_file_path", result[0]);
        }
      );
    });
    this.form = form;
    this.showTips();
  }
  showTips() {
    let tips = `## 简介
加载C#程序集到内存中。类似Cobalt Strike的execute-assembly功能。
    
## 内存加载
直接通过HTTP包将assembly打入目标内存，仅需选择本地需要加载的exe文件即可，期间文件不落地。

## URL加载
原创加载URL文件。

`;
    this.editor.session.setValue(tips);
  }

  getArgs() {
    let args = {};
    let load_type = this.form.getCheckedValue("load_type");
    if (load_type == "load_by_memory") {
      let local_file_path = this.form.getItemValue("local_file_path");
      console.log(local_file_path);
      let bin = this.file2base64(local_file_path);
      // var zlib = require("zlib");
      // let compressed = zlib.deflateSync(Buffer.from(jarClassData, "base64"), {
      //   level: 9, // 0~9
      //   memLevel: 5,
      // });
      // jarClassData = compressed.toString("base64");
      // console.log(jarClassData);
      args["bin"] = bin;
    } else if (load_type == "load_by_url") {
      args["type"] = "url";
      args["bin"] = this.form.getItemValue("remote_file_path");
    }
    this.parammode = 2;
    this.payloadtype = "load_assembly";
    args["cmd"] = this.form.getItemValue("command_args");
    return args;
  }
  file2base64(file) {
    const fs = require("fs");
    const path = require("path");
    let filePath = path.resolve(file);
    let data = fs.readFileSync(filePath);
    data = Buffer.from(data).toString("base64");
    return data;
  }
}
module.exports = SharpLoader;
