"use strict";

const Base = require("../base");
const LANG = require("../../language"); // 插件语言库
const LANG_T = antSword["language"]["toastr"]; // 通用通知提示
class ExecPayload extends Base {
  createForm(cell) {
    let self = this;
    let editor = null;
    // 初始化编辑器
    editor = ace.edit(self.cellA.cell.lastChild);
    editor.$blockScrolling = Infinity;
    editor.setTheme("ace/theme/tomorrow");
    editor.session.setUseWrapMode(true);
    editor.session.setWrapLimitRange(null, null);

    editor.setOptions({
      fontSize: "14px",
      enableBasicAutocompletion: true,
      enableSnippets: true,
      enableLiveAutocompletion: true,
    });
    const inter = setInterval(editor.resize.bind(editor), 200);
    self.win.win.attachEvent("onClose", () => {
      clearInterval(inter);
      return true;
    });
    self.editor2 = editor;
    this.showTips();
  }

  showTips() {
    let tips = "";
    switch (this.shelltype) {
      case "aspx":
        tips = `Jscript代码`;
        break;
      case "jsp":
        tips = `base64格式的编译后的class文件`;
        break;
      case "php":
        tips = `PHP 代码`;
      default:
        break;
    }

    this.editor.session.setValue(tips);
  }
  exploit() {
    let self = this;
    self.core = this.top.core;
    let data = {
      _: self.editor2.session.getValue(),
    };

    self.core
      .request(data)
      .then((_ret) => {
        let res = antSword.unxss(_ret["text"], false); //过滤xss
        if (res === "") {
          res = "output is empty.";
        }
        this.editor.session.setValue(res); //回显内容到输出结果
        this.editor.setReadOnly(true);
        toastr.success(LANG["success"], LANG_T["success"]);
      })
      .catch((e) => {
        console.log(JSON.stringify(e));
        toastr.error(e.constructor === Object ? JSON.stringify(e) : e, "Error");
      });
  }
}
module.exports = ExecPayload;
